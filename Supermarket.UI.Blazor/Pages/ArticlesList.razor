
@page "/articlesList"
@page "/articlesList/{idOrder:int}"
@inject RestClient RestClient
@inject HttpClient httpClient

<h1>Lista De Articulos</h1>
<a href="/articleForm" class="btn" style="background-color:cornflowerblue">Crear Articulo</a>

<div style="height:620px;overflow:scroll">
    @if (Articles.Count() != 0)
    {
        <table class="table" border="1">
            <tr>
                <td style="background-color:dodgerblue"><b>Familia</b></td>
                <td style="background-color:dodgerblue"><b>Descripcion</b></td>
                <td style="background-color:dodgerblue"><b>Precio</b></td>
            </tr>
            @foreach (var article in Articles)
            {
                <tr>
                    <td>@article.Family</td>
                    <td>@article.Description</td>
                    <td>@article.Price</td>
                    <td>
                        @if (idOrder != 0)
                        {
                            <a href="/orderForm/@idOrder/@article.Id" class="btn" style="background-color: dodgerblue">Seleccionar</a>
                        }
                        else
                        {
                            <a class="btn btn-success" href="/articleForm/@article.Id">Editar</a>
                            <a class="btn btn-danger" @onclick="@(() => DeleteArticle(article.Id) )">Eliminar</a>
                        }

                    </td>

                </tr>
            }
        </table>


    }
</div>


    @code
{
        [Parameter] public int idOrder { get; set; }
        List<Article> Articles { get; set; } = new List<Article>();

        public async void DeleteArticle(int id)
        {
            await httpClient.DeleteAsync($"api/Articles?idArticle={id}");
            var ready = await GetArticles();
            if (ready) await InvokeAsync(StateHasChanged);
        }

        public async Task<bool> GetArticles()
        {
            var response = await httpClient.GetFromJsonAsync<Response<Article>>("/api/Articles");
            Articles = response.Content;
            return true;
        }

        protected async override Task OnInitializedAsync()
        {
            bool ready = await GetArticles();
            if (ready) await InvokeAsync(StateHasChanged);
        }
    }
