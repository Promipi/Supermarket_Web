@page "/orderList"
@inject RestClient RestClient
@inject HttpClient httpClient
<h3>Lista De Pedidos</h3>

<table class="table" border="1">


    <tr>
        <td style="background-color:dodgerblue"><b>Id</b></td>
        <td style="background-color:dodgerblue"><b>Fecha</b></td>
        <td style="background-color:dodgerblue"><b>Metodo Pago</b></td>
        <td style="background-color:dodgerblue"><b>Costo Total</b></td>
    </tr>
    @if (Orders.Count() != 0)
    {
        @foreach (var order in Orders)
        {
            <tr>
                <td>@order.Id</td>
                <td>@order.DateMade</td>
                <td>@order.PaymentMethod</td>
                <td>@order.Total</td>
                <td>
                    <a class="btn btn-success" href="/orderForm/@order.Id">Seleccionar</a>
                    <a class="btn btn-danger" @onclick="@( () => DeleteOrder(order.Id) )">Eliminar</a>
                </td>

            </tr>
        }
    }
</table>

    @code {
        List<Order> Orders = new List<Order>();

        public async void DeleteOrder(int idOrder)
        {
            string deleteOrder = $"api/Orders?idOrder={idOrder}";
            var response = await httpClient.DeleteAsync(deleteOrder);
            if (response.Content != null)
            {
                bool ready = await GetOrders(); if (ready) await InvokeAsync(StateHasChanged);
            }
        }

        public async Task<bool> GetOrders()
        {
            string getAllOrders = "/api/Orders";
            var response = await httpClient.GetFromJsonAsync<Response<Order>>(getAllOrders);
            Orders = response.Content;
            return true;
        }

        protected async override Task OnInitializedAsync()
        {
            bool ready = await GetOrders(); if (ready) await InvokeAsync(StateHasChanged);
        }


    }
